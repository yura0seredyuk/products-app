{"version":3,"sources":["Components/Details.jsx","Components/Products.jsx","Components/Modal.jsx","App.js","index.js"],"names":["nanoid","customAlphabet","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","useStyles","makeStyles","root","maxWidth","Details","subtitle","productName","productDescription","productWeight","productSize","productId","productImageUrl","classes","useState","description","setDescription","comments","setComments","changeName","setChangeName","changeWeight","setChangeWeight","changeDescription","setChangeDescription","ref","firebase","firestore","collection","reference","React","modalIsOpen","setIsOpen","closeModal","useEffect","onSnapshot","querySnapshot","items","forEach","item","push","data","Card","className","CardActionArea","CardMedia","component","alt","height","image","title","CardContent","Typography","gutterBottom","variant","color","width","Box","m","Button","onClick","map","comment","date","Date","toISOString","slice","doc","id","delete","catch","err","Error","deleteComment","noValidate","autoComplete","TextField","type","label","value","onChange","e","target","newComment","set","isOpen","onAfterOpen","style","onRequestClose","contentLabel","_subtitle","event","updatedProduct","name","weight","update","Products","products","deleteProduct","display","flexWrap","justifyContent","product","imageUrl","count","CardActions","size","theme","margin","spacing","ModalForm","setName","setCount","setWeight","setSize","setImageUrl","onSubmit","newProduct","required","placeholder","split","mr","App","setProducts","fontSize","fontFamily","sorted","sort","prev","next","localeCompare","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab8963e1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from 'react-modal';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { Box } from '@material-ui/core';\nimport { customAlphabet } from 'nanoid';\n\nconst nanoid = customAlphabet('1234567890', 4);\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nModal.setAppElement('#root');\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n});\n\nexport const Details = ({\n  productName,\n  productDescription,\n  productWeight,\n  productSize,\n  productId,\n  productImageUrl,\n}) => {\n  const classes = useStyles();\n  const [description, setDescription] = useState('');\n  const [comments, setComments] = useState('');\n  const [changeName, setChangeName] = useState(productName);\n  const [changeWeight, setChangeWeight] = useState(productWeight);\n  const [changeDescription, setChangeDescription]\n    = useState(productDescription);\n  const ref = firebase\n    .firestore()\n    .collection(`Products/${productId}/comments/`);\n  const reference = firebase\n    .firestore()\n    .collection('Products');\n\n  let subtitle;\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    subtitle.style.color = 'black';\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function editProducts(updatedProduct) {\n    reference\n      .doc(updatedProduct.id)\n      .update(updatedProduct)\n      .catch((err) => {\n        throw new Error(err);\n      });\n    setIsOpen(false);\n  }\n\n  function getComments() {\n    ref.onSnapshot((querySnapshot) => {\n      const items = [];\n\n      querySnapshot.forEach((item) => {\n        items.push(item.data());\n      });\n      setComments(items);\n    });\n  }\n\n  useEffect(() => {\n    getComments();\n  }, []);\n\n  function addComment(newComment) {\n    ref\n      .doc(newComment.id)\n      .set(newComment)\n      .catch((err) => {\n        throw new Error(err);\n      });\n  }\n\n  function deleteComment(comment) {\n    ref\n      .doc(comment.id)\n      .delete()\n      .catch((err) => {\n        throw new Error(err);\n      });\n  }\n\n  const addCommentToDatabase = () => {\n    addComment({\n      description, id: nanoid(), productId, date: new Date(),\n    });\n    setDescription('');\n  };\n\n  const editName = (event) => {\n    setChangeName(event.target.value);\n  };\n\n  const editDescription = (event) => {\n    setChangeDescription(event.target.value);\n  };\n\n  const editWeight = (event) => {\n    setChangeWeight(event.target.value);\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardActionArea>\n          <CardMedia\n            component=\"img\"\n            alt={productName}\n            height=\"300\"\n            image={productImageUrl}\n            title={productName}\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h4\" component=\"h2\">\n              {productName}\n            </Typography>\n            <Typography variant=\"body1\">\n              {productDescription}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {`Weight: ${productWeight}g.`}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {`Height: ${productSize && productSize.height}mm`\n              + ` Width: ${productSize && productSize.width}mm`}\n            </Typography>\n\n            <Box m={2}>\n              <Button\n                variant=\"contained\"\n                onClick={openModal}\n              >\n                Edit details\n              </Button>\n            </Box>\n\n            <Typography>Comments:</Typography>\n\n            {comments && comments.map(comment => (\n              <Box key={comment.id}>\n                <Typography>\n                  {comment.description\n                    ? `# ${comment.description}`\n                    : (<>No comments</>)}\n                </Typography>\n                <Typography>\n                  {comment.date && `Date: ${\n                    new Date().toISOString().slice(0, 10)\n                  }`}\n                </Typography>\n                <Box m={2}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => deleteComment(comment)}\n                  >\n                    X\n                  </Button>\n                </Box>\n              </Box>\n            ))}\n            <form\n              className={classes.root}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <TextField\n                type=\"text\"\n                id=\"standard-basic\"\n                label=\"Comment\"\n                value={description}\n                onChange={e => setDescription(e.target.value)}\n              />\n              <Box m={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={addCommentToDatabase}\n                >\n                  Add Comment\n                </Button>\n              </Box>\n            </form>\n\n            <Modal\n              isOpen={modalIsOpen}\n              onAfterOpen={afterOpenModal}\n              onRequestClose={closeModal}\n              style={customStyles}\n              contentLabel=\"Example Modal\"\n            >\n\n              <h2 ref={_subtitle => (subtitle = _subtitle)}>Edit details</h2>\n              <form>\n                <Box>Name:</Box>\n                <TextField\n                  id=\"standard-basic\"\n                  value={changeName}\n                  onChange={editName}\n                />\n                <Box>Description:</Box>\n                <TextField\n                  id=\"standard-basic\"\n                  value={changeDescription}\n                  onChange={editDescription}\n                />\n                <Box>Weight:</Box>\n                <TextField\n                  id=\"standard-basic\"\n                  value={changeWeight}\n                  onChange={editWeight}\n                />\n                <Box>\n                  <Button\n                    onClick={() => editProducts({\n                      name: changeName,\n                      description: changeDescription,\n                      weight: changeWeight,\n                      id: productId,\n                    })}\n                  >\n                    Save\n                  </Button>\n                  <Button onClick={closeModal}>\n                    Close details\n                  </Button>\n                </Box>\n              </form>\n            </Modal>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </>\n  );\n};\n\nDetails.propTypes = {\n  productName: PropTypes.string.isRequired,\n  productDescription: PropTypes.string.isRequired,\n  productWeight: PropTypes.string.isRequired,\n  productSize: PropTypes.shape({\n    height: PropTypes.string.isRequired,\n    width: PropTypes.string.isRequired,\n  }).isRequired,\n  productId: PropTypes.string.isRequired,\n  productImageUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from '@material-ui/core';\nimport { Details } from './Details';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n});\n\nexport function Products({ products, deleteProduct }) {\n  const classes = useStyles();\n\n  return (\n    <>\n      <>\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\n          {products.map(product => (\n            <Box m={2} key={product.id}>\n              <Card className={classes.root}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt={product.name}\n                    height=\"140\"\n                    image={product.imageUrl}\n                    title={product.name}\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h4\" component=\"h2\">\n                      {product.name}\n                    </Typography>\n                    <Typography variant=\"body1\">\n                      {`Products left: ${product.count}`}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions>\n                  <Box m={2}>\n                    <Button variant=\"contained\" color=\"primary\">\n                      Learn More\n                    </Button>\n                  </Box>\n\n                  <Box m={2}>\n                    <Button\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={() => deleteProduct(product)}\n                    >\n                      Delete product\n                    </Button>\n                  </Box>\n                </CardActions>\n              </Card>\n            </Box>\n          ))}\n        </Box>\n      </>\n      <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\n        {products.map(product => (\n          <Box key={product.id} m={2}>\n            <Details\n              productName={product.name}\n              productDescription={product.description}\n              productWeight={product.weight}\n              productSize={product.size}\n              productImageUrl={product.imageUrl}\n              productId={product.id}\n            />\n          </Box>\n        ))}\n      </Box>\n    </>\n  );\n}\n\nProducts.propTypes = {\n  deleteProduct: PropTypes.func.isRequired,\n  products: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      weight: PropTypes.string.isRequired,\n      size: PropTypes.shape({}).isRequired,\n      imageUrl: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Modal from 'react-modal';\nimport firebase from 'firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { customAlphabet } from 'nanoid';\nimport { Box } from '@material-ui/core';\n\nconst nanoid = customAlphabet('1234567890', 4);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst customStyles = {\n  content: {\n    width: '600px',\n    top: '30%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nModal.setAppElement('#root');\n\nexport function ModalForm() {\n  const [name, setName] = useState('');\n  const [count, setCount] = useState('');\n  const [weight, setWeight] = useState('');\n  const [size, setSize] = useState({});\n  const [imageUrl, setImageUrl] = useState('');\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [description, setDescription] = useState('');\n  const ref = firebase.firestore().collection('Products');\n  const classes = useStyles();\n\n  let subtitle;\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    subtitle.style.color = '#grey';\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function addNewProducts(newProduct) {\n    ref\n      .doc(newProduct.id)\n      .set(newProduct)\n      .catch((err) => {\n        throw new Error(err);\n      });\n  }\n\n  const addSize = (event) => {\n    const value = event.target.value.split('x');\n\n    setSize({\n      height: value[0], width: value[1],\n    });\n  };\n\n  const clearFields = () => {\n    setName('');\n    setSize('');\n    setCount('');\n    setDescription('');\n    setImageUrl('');\n    setWeight('');\n  };\n\n  const addProductToDatabase = () => {\n    addNewProducts({\n      id: nanoid(),\n      name,\n      count,\n      imageUrl,\n      weight,\n      size,\n      description,\n      comments: [],\n    });\n    setIsOpen(false);\n    clearFields();\n  };\n\n  return (\n    <>\n      <Box m={2}>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={openModal}\n        >\n          Add new Product\n        </Button>\n      </Box>\n\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <h2 ref={_subtitle => (subtitle = _subtitle)}>ADD NEW PRODUCT</h2>\n        <form\n          className={classes.root}\n          autoComplete=\"off\"\n          onSubmit={addProductToDatabase}\n        >\n          <TextField\n            type=\"text\"\n            id=\"standard-basic\"\n            label=\"Name\"\n            value={name}\n            required\n            onChange={e => setName(e.target.value)}\n          />\n\n          <TextField\n            type=\"number\"\n            id=\"standard-basic\"\n            label=\"Count\"\n            value={count}\n            required\n            onChange={e => setCount(e.target.value)}\n          />\n\n          <TextField\n            type=\"text\"\n            id=\"standard-basic\"\n            label=\"ImageUrl\"\n            value={imageUrl}\n            required\n            onChange={e => setImageUrl(e.target.value)}\n          />\n\n          <TextField\n            type=\"text\"\n            id=\"standard-basic\"\n            label=\"Weight\"\n            value={weight}\n            required\n            onChange={e => setWeight(e.target.value)}\n          />\n\n          <TextField\n            type=\"text\"\n            id=\"standard-basic\"\n            label=\"Size\"\n            placeholder=\"height x width (x required)\"\n            required\n            onChange={addSize}\n          />\n\n          <TextField\n            type=\"text\"\n            id=\"standard-basic\"\n            label=\"Description\"\n            required\n            onChange={e => setDescription((e.target.value))}\n          />\n\n          <Box m={2} display=\"flex\">\n            <Box mr={2}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={closeModal}\n              >\n                Cancel\n              </Button>\n            </Box>\n            <Box>\n              <Button\n                type=\"submit\"\n                variant=\"outlined\"\n                color=\"primary\"\n              >\n                Submit\n              </Button>\n            </Box>\n          </Box>\n        </form>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport Button from '@material-ui/core/Button';\nimport { Box } from '@material-ui/core';\nimport { Products } from './Components/Products';\nimport { ModalForm } from './Components/Modal';\nimport 'firebase/firestore';\n\nfunction App() {\n  const [products, setProducts] = useState([]);\n  const ref = firebase.firestore().collection('Products');\n\n  function getProducts() {\n    ref.onSnapshot((querySnapshot) => {\n      const items = [];\n\n      querySnapshot.forEach((item) => {\n        items.push(item.data());\n      });\n      setProducts(items);\n    });\n  }\n\n  useEffect(() => {\n    getProducts();\n  }, []);\n\n  function deleteProduct(product) {\n    ref\n      .doc(product.id)\n      .delete()\n      .catch((err) => {\n        throw new Error(err);\n      });\n  }\n\n  const sortByName = () => {\n    const sorted = [...products].sort(\n      (prev, next) => prev.name.localeCompare(next.name),\n    );\n\n    setProducts(sorted);\n  };\n\n  const sortByCount = () => {\n    const sorted = [...products].sort((prev, next) => prev.count - next.count);\n\n    setProducts(sorted);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <Box\n          m={2}\n          fontSize={40}\n          fontFamily=\"Roboto\"\n        >\n          Product list\n        </Box>\n\n        <Box m={2} display=\"flex\">\n          <Box mr={2}>\n            <Button\n              variant=\"contained\"\n              onClick={sortByName}\n            >\n              Sort by name\n            </Button>\n          </Box>\n          <Box>\n            <Button\n              variant=\"contained\"\n              onClick={sortByCount}\n            >\n              Sort by count\n            </Button>\n          </Box>\n        </Box>\n\n        <ModalForm />\n\n        <Products\n          products={products}\n          deleteProduct={deleteProduct}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport firebase from 'firebase/app';\nimport App from './App';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBSZDPFopZP_72U7aGNOjbxQQB4f618zbQ',\n  authDomain: 'products-app-5d772.firebaseapp.com',\n  projectId: 'products-app-5d772',\n  storageBucket: 'products-app-5d772.appspot.com',\n  messagingSenderId: '635234318516',\n  appId: '1:635234318516:web:0d9169d9726648894b7fe1',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}